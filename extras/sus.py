#thank https://github.com/LinesGuy/img_sussifier/blob/main/sus.py

        #‚†Ä‚†Ä‚†Ä‚°Ø‚°Ø‚°æ‚†ù‚†ò‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ä‚†ò‚°Æ‚££‚†™‚†¢‚°ë‚°å
        #‚†Ä‚†Ä‚†Ä‚†ü‚†ù‚†à‚†Ä‚†Ä‚†Ä‚†°‚†Ä‚††‚¢à‚††‚¢ê‚¢†‚¢Ç‚¢î‚£ê‚¢Ñ‚°Ç‚¢î‚†Ä‚°Å‚¢â‚†∏‚¢®‚¢ë‚†ï‚°å
        #‚†Ä‚†Ä‚°Ä‚†Å‚†Ä‚†Ä‚†Ä‚°Ä‚¢Ç‚†°‚†à‚°î‚£ï‚¢Æ‚£≥‚¢Ø‚£ø‚£ª‚£ü‚£Ø‚£Ø‚¢∑‚£´‚£Ü‚°Ç‚†Ä‚†Ä‚¢ê‚†ë‚°å
        #‚¢Ä‚††‚†ê‚†à‚†Ä‚¢Ä‚¢Ç‚†¢‚°Ç‚†ï‚°Å‚£ù‚¢Æ‚£≥‚¢Ω‚°Ω‚£æ‚£ª‚£ø‚£Ø‚°Ø‚£ü‚£û‚¢æ‚¢ú‚¢Ü‚†Ä‚°Ä‚†Ä‚†™
        #‚£¨‚†Ç‚†Ä‚†Ä‚¢Ä‚¢Ç‚¢™‚†®‚¢Ç‚†•‚£∫‚°™‚£ó‚¢ó‚£Ω‚¢Ω‚°Ø‚£ø‚£Ω‚£∑‚¢ø‚°Ω‚°æ‚°Ω‚£ù‚¢é‚†Ä‚†Ä‚†Ä‚¢°
        #‚£ø‚†Ä‚†Ä‚†Ä‚¢Ç‚†¢‚¢Ç‚¢•‚¢±‚°π‚£™‚¢û‚°µ‚£ª‚°™‚°Ø‚°Ø‚£ü‚°æ‚£ø‚£ª‚°Ω‚£Ø‚°ª‚£™‚†ß‚†ë‚†Ä‚†Å‚¢ê
        #‚£ø‚†Ä‚†Ä‚†Ä‚†¢‚¢ë‚††‚†ë‚†ï‚°ù‚°é‚°ó‚°ù‚°é‚£û‚¢Ω‚°π‚£ï‚¢Ø‚¢ª‚†π‚°π‚¢ö‚†ù‚°∑‚°Ω‚°®‚†Ä‚†Ä‚¢î
        #‚£ø‚°Ø‚†Ä‚¢à‚†à‚¢Ñ‚†Ç‚†Ç‚†ê‚†Ä‚†å‚††‚¢ë‚†±‚°±‚°±‚°ë‚¢î‚†Å‚†Ä‚°Ä‚†ê‚†ê‚†ê‚°°‚°π‚£™‚†Ä‚†Ä‚¢ò
        #‚£ø‚£Ω‚†Ä‚°Ä‚°ä‚†Ä‚†ê‚†®‚†à‚°Å‚†Ç‚¢à‚††‚°±‚°Ω‚£∑‚°ë‚†Å‚††‚†ë‚†Ä‚¢â‚¢á‚£§‚¢ò‚£™‚¢Ω‚†Ä‚¢å‚¢é
        #‚£ø‚¢æ‚†Ä‚¢å‚†å‚†Ä‚°Å‚†¢‚†Ç‚†ê‚°Ä‚†Ä‚¢Ä‚¢≥‚¢Ω‚£Ω‚°∫‚£®‚¢Ñ‚£ë‚¢â‚¢É‚¢≠‚°≤‚£ï‚°≠‚£π‚††‚¢ê‚¢ó
        #‚£ø‚°ó‚†Ä‚†¢‚†°‚°±‚°∏‚£î‚¢µ‚¢±‚¢∏‚†à‚†Ä‚°™‚£≥‚£≥‚¢π‚¢ú‚°µ‚£±‚¢±‚°±‚£≥‚°π‚£µ‚£ª‚¢î‚¢Ö‚¢¨‚°∑
        #‚£∑‚°á‚°Ç‚†°‚°ë‚¢ï‚¢ï‚†ï‚°ë‚†°‚¢Ç‚¢ä‚¢ê‚¢ï‚°ù‚°Æ‚°ß‚°≥‚£ù‚¢¥‚°ê‚£Å‚†É‚°´‚°í‚£ï‚¢è‚°Æ‚£∑‚°ü
        #‚£∑‚£ª‚£Ö‚†ë‚¢å‚†¢‚†Å‚¢ê‚††‚†ë‚°ê‚†ê‚†å‚°™‚†Æ‚°´‚†™‚°™‚°™‚£∫‚¢∏‚†∞‚†°‚††‚†ê‚¢±‚†®‚°™‚°™‚°∞
        #‚£Ø‚¢∑‚£ü‚£á‚°Ç‚°Ç‚°å‚°Ä‚†Ä‚†Å‚°Ç‚†Ö‚†Ç‚†Ä‚°ë‚°Ñ‚¢á‚†á‚¢ù‚°®‚°†‚°Å‚¢ê‚††‚¢Ä‚¢™‚°ê‚°ú‚°™‚°ä
        #‚£ø‚¢Ω‚°æ‚¢π‚°Ñ‚†ï‚°Ö‚¢á‚†Ç‚†ë‚£¥‚°¨‚£¨‚£¨‚£Ü‚¢Æ‚£¶‚£∑‚£µ‚£∑‚°ó‚¢É‚¢Æ‚†±‚°∏‚¢∞‚¢±‚¢∏‚¢®‚¢å
        #‚£Ø‚¢Ø‚£ü‚†∏‚£≥‚°Ö‚†ú‚†î‚°å‚°ê‚†à‚†ª‚†ü‚£ø‚¢ø‚£ø‚£ø‚†ø‚°ª‚£É‚†¢‚£±‚°≥‚°±‚°©‚¢¢‚†£‚°É‚†¢‚†Å
        #‚°Ø‚£ü‚£û‚°á‚°ø‚£Ω‚°™‚°ò‚°∞‚†®‚¢ê‚¢Ä‚†¢‚¢¢‚¢Ñ‚¢§‚£∞‚†º‚°æ‚¢ï‚¢ï‚°µ‚£ù‚†é‚¢å‚¢™‚†™‚°ò‚°å‚†Ä
        #‚°Ø‚£≥‚†Ø‚†ö‚¢ä‚†°‚°Ç‚¢Ç‚†®‚†ä‚†î‚°ë‚†¨‚°∏‚£ò‚¢¨‚¢™‚£™‚°∫‚°º‚£ï‚¢Ø‚¢û‚¢ï‚¢ù‚†é‚¢ª‚¢º‚£Ä‚†Ä
        #‚†Å‚°Ç‚†î‚°Å‚°¢‚†£‚¢Ä‚†¢‚†Ä‚†Ö‚†±‚°ê‚°±‚°ò‚°î‚°ï‚°ï‚£≤‚°π‚£é‚°Æ‚°è‚°ë‚¢ú‚¢º‚°±‚¢©‚£ó‚£Ø‚£ü
        #‚¢Ä‚¢Ç‚¢ë‚†Ä‚°Ç‚°É‚†Ö‚†ä‚¢Ñ‚¢ë‚††‚†ë‚¢ï‚¢ï‚¢ù‚¢Æ‚¢∫‚¢ï‚¢ü‚¢Æ‚¢ä‚¢¢‚¢±‚¢Ñ‚†É‚£á‚£û‚¢û‚£û‚¢æ
        #‚¢Ä‚†¢‚°ë‚°Ä‚¢Ç‚¢ä‚††‚†Å‚°Ç‚°ê‚†Ä‚†Ö‚°à‚†™‚†™‚†™‚†£‚†´‚†ë‚°Å‚¢î‚†ï‚£ú‚£ú‚¢¶‚°∞‚°é‚°Ø‚°æ‚°Ω

from PIL import Image
import numpy as np
import subprocess
import os
import random
import requests
from io import BytesIO
import discord
import traceback




#output_width = 30  # Width of output gif, measured in sussy crewmates
nearest_neighbour = False  # Enable this for flags
twerk_frame_count = 6  # 0.png to 5.png

# Load twerk frames ü•µ
twerk_frames = []
twerk_frames_data = []  # Image as numpy array, pre-calculated for performance

async def sus(ctx,url,output_width=30):

    reply = await ctx.reply("Working on request...")

    #important! inorder to avoid cross-contamination we will take the ctx id and append
    append = ctx.interaction_id #int(random.random()*10000)

    response = requests.get(url)
    IMAGE = Image.open(BytesIO(response.content))

    for i in range(6):
        try:
            img = Image.open(f"extras/twerk_imgs/{i}.png").convert("RGBA")
        except Exception as e:
            print(f"Error loading twerk frames! Filename = {i}_{append}.png")
            print("Probably you renamed the twerk_imgs folder or forgot to set twerk_frame_count. baka")
            print(e)
            exit()
        twerk_frames.append(img)
        twerk_frames_data.append(np.array(img))

    # Get dimensions of first twerk frame. Assume all frames have same dimensions
    twerk_width, twerk_height = twerk_frames[0].size

    # Get image to sussify!
    input_image = IMAGE.convert("RGB") #Image.open(IMAGE).convert("RGB")
    input_width, input_height = input_image.size

    # Height of output gif (in crewmates)
    output_height = int(output_width * (input_height / input_width) * (twerk_width / twerk_height))

    # Width, height of output in pixels
    output_px = (int(output_width * twerk_width), int(output_height * twerk_height))

    # Scale image to number of crewmates, so each crewmate gets one color
    if nearest_neighbour:
        input_image_scaled = input_image.resize((output_width, output_height), Image.NEAREST)
    else:
        input_image_scaled = input_image.resize((output_width, output_height))

    for frame_number in range(twerk_frame_count):
        #print("Sussying frame #", frame_number)

        # Create blank canvas
        background = Image.new(mode="RGBA", size=output_px)

        progress = frame_number
        left = twerk_frame_count-frame_number-1
        # await ctx.send("{}{}".format(progress,left))

        await reply.edit(content="Working... |{}{}|".format("‚ñà"*progress,"‚ñë"*left))

        for y in range(output_height):
            for x in range(output_width):
                r, g, b = input_image_scaled.getpixel((x, y))

                # Grab that twerk data we calculated earlier
                # (x - y + frame_number) is the animation frame index,
                # we use the position and frame number as offsets to produce the wave-like effect
                sussified_frame_data = np.copy(twerk_frames_data[(x - y + frame_number) % len(twerk_frames)])
                red, green, blue, alpha = sussified_frame_data.T
                # Replace all pixels with colour (214,224,240) with the input image colour at that location
                color_1 = (red == 214) & (green == 224) & (blue == 240)
                sussified_frame_data[..., :-1][color_1.T] = (r, g, b)  # thx stackoverflow
                # Repeat with colour (131,148,191) but use two thirds of the input image colour to get a darker colour
                color_2 = (red == 131) & (green == 148) & (blue == 191)
                sussified_frame_data[..., :-1][color_2.T] = (int(r*2/3), int(g*2/3), int(b*2/3))

                # Convert sussy frame data back to sussy frame
                sussified_frame = Image.fromarray(sussified_frame_data)

                # Slap said frame onto the background 
                background.paste(sussified_frame, (x * twerk_width, y * twerk_height))
        background.save(f"sussified_{frame_number}_{append}.png")

    await reply.edit(content="Frames creating, compiling...")
    print("Converting sussy frames to sussy gif")
    # Convert sussied frames to gif. PIL has a built-in method to save gifs but
    # it has dithering which looks sus, so we use ffmpeg with dither=none
    subprocess.call('ffmpeg.exe -f image2 -i sussified_%d_'+str(append)+'.png -filter_complex "[0:v] scale=sws_dither=none:,split [a][b];[a] palettegen=max_colors=255:stats_mode=single [p];[b][p] paletteuse=dither=none" -r 20 -y -hide_banner -loglevel error sussified_'+str(append)+'.gif')
    await reply.edit(content="Created gif!")
    # Remove temp files
    print("Ejecting temp files from folder")
    for frame_number in range(twerk_frame_count):
        os.remove(f"sussified_{frame_number}_{append}.png")

    try:
        IMAGE = discord.File("sussified_"+str(append)+".gif") 
        await reply.edit(content="",file=IMAGE)
    except Exception as e:
        err = traceback.format_exc()
        # await reply.edit(content=err)
        #await ctx.reply("Failed to send image, probably too big?")

        if "too large" in err:
            await reply.edit(content="**ERROR:** Resultant gif too large to send (blame discord). Try a smaller size, or smaller image.")

    os.remove(f"sussified_"+str(append)+".gif")

